# encoding: utf-8

"""
binary butterfly validator
Copyright (c) 2021, binary butterfly GmbH
Use of this source code is governed by an MIT-style license that can be found in the LICENSE.txt.
"""

import dataclasses

from wtfjson.validators import Validator


# Specify which functions/symbols are imported with `from module import *`
__all__ = [
    'validator_dataclass',
    'validator_field',
]


# Internal functions

def _prepare_dataclass_metadata(cls: type) -> None:
    """
    Prepares a soon-to-be dataclass (before it is decorated with @dataclass) to be usable with DataclassValidator by checking it
    for Validator objects and setting dataclass metadata.

    (Used internally by the @validator_dataclass decorator.)
    """
    for name in cls.__annotations__.keys():
        value = getattr(cls, name, None)
        if isinstance(value, Validator):
            setattr(cls, name, dataclasses.field(metadata={'validator': value}))


# Extend Python dataclass functions for usage with DataclassValidator

def validator_dataclass(cls=None, /, **kwargs):
    """
    Decorator that turns a normal class into a DataclassValidator-compatible dataclass.

    Prepares the class by generating dataclass metadata that is needed by the DataclassValidator, then turns the class
    into a dataclass using the regular @dataclass decorator.

    Takes the same (optional) parameters as @dataclass.
    """
    def wrap(_cls):
        _prepare_dataclass_metadata(_cls)
        return dataclasses.dataclass(_cls, **kwargs)

    # Check if decorator is called as @validator_dataclass or @validator_dataclass(**kwargs)
    if cls is None:
        # With parenthesis (and optional keyword arguments)
        return wrap

    # Called as @validator_dataclass without arguments
    return wrap(cls)


def validator_field(validator: Validator, *, metadata: dict = None, **kwargs):
    """
    Define a dataclass field compatible with DataclassValidator.

    Wraps the regular `dataclasses.field()` function, but has special parameters to add validator metadata to the field.

    Parameters:
        validator: Validator to use for validating the field (saved as metadata)
        metadata: Base dictionary for field metadata, gets merged with the metadata generated by this function
        **kwargs: Additional keyword arguments that are passed to `dataclasses.field()`
    """
    # If metadata is specified as argument, use it as the base for the field's metadata
    if metadata is None:
        metadata = {}

    # Add validator metadata
    metadata.update({
        'validator': validator,
    })

    # Create a dataclass field with our metadata
    return dataclasses.field(metadata=metadata, **kwargs)
